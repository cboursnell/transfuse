#!/usr/bin/env ruby

require 'trollop'
require 'transfuse'

ARGV[0] = "--help" if ARGV.length() == 0

opts = Trollop::options do
  version Transfuse::VERSION::STRING.dup
  banner <<-EOS

  Transfuse v#{Transfuse::VERSION::STRING.dup}
  by Chris Boursnell <cmb211@cam.ac.uk> and
     Richard Smith-Unna <rds45@cam.ac.uk>

  DESCRIPTION:
  Merge multiple assemblies.

  USAGE:
  transfuse <options>

  OPTIONS:

  EOS
  opt :assemblies, "assembly files in FASTA format, comma-separated",
      :type => String
  opt :left, "left reads file in FASTQ format",
      :type => String
  opt :right, "right reads file in FASTQ format",
      :type => String
  opt :output, "write merged assembly to file", :type => String
  opt :threads, "number of threads", :type => :int, :default => 1
  opt :id, "sequence identity to cluster at", :type => :float, :default => 1.0
  opt :install, "install dependencies"
  opt :verbose, "be verbose"
end

transfuse = Transfuse::Transfuse.new opts.threads, opts.verbose

if opts.install
  transfuse.install_dependencies
  abort "Everything installed"
end
missing = transfuse.check_dependencies
unless missing.empty?
  list = missing.collect {|i| "#{i.name}:#{i.version}"}.join("\n - ")
  msg = "Not installed: \n - #{list}"
  abort msg
end

assembly_files = transfuse.check_files(opts.assemblies, "assemblies")
left = transfuse.check_files(opts.left, "left")
right = transfuse.check_files(opts.right, "right")
if opts.output
  if File.exist?(opts.output)
    abort "Output #{opts.output} already exists"
  end
else
  abort "Please specify an output with the --output option"
end

if opts.scores
# load the scores from the comma separated list of files
  scores = transfuse.load_scores score_files
elsif opts.left and opts.right
  scores = transfuse.transrate assembly_files, left, right
else
  msg = "Please provide either transrate contig scores as csv files or\n"
  msg << "left and right fastq files to generate scores using transrate"
  abort msg
end

# filter out assemblies with low score
assembly_files = transfuse.filter assembly_files, scores

# concatenate assemblies into one fasta file
cat = transfuse.concatenate assembly_files

# load fasta sequences from concatenated file into hash
transfuse.load_fasta cat

# cluster using vsearch
msa = transfuse.cluster cat, opts.id

# read the msa from vsearch and produce a consensus fasta
cons = transfuse.consensus msa, scores, opts.output

# transrate the consensus output to remove low scoring contigs
transfuse.transrate_consensus cons, opts.output, left, right
