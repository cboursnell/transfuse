#!/usr/bin/env ruby

require 'trollop'
require 'transfuse'

ARGV[0] = "--help" if ARGV.length() == 0

opts = Trollop::options do
  version Transfuse::VERSION::STRING.dup
  banner <<-EOS

  Transfuse v#{Transfuse::VERSION::STRING.dup}
  by Chris Boursnell <cmb211@cam.ac.uk> and
     Richard Smith-Unna <rds45@cam.ac.uk>

  DESCRIPTION:
  Merge multiple assemblies.

  USAGE:
  transfuse <options>

  OPTIONS:

  EOS
  opt :assemblies, "assembly files in FASTA format, comma-separated",
      :type => String, :required => true
  opt :left, "left reads file in FASTQ format",
      :type => String
  opt :right, "right reads file in FASTQ format",
      :type => String
  opt :scores, "transrate contig score output files, comma-separated. Ignored if reads are provided",
      :type => String
  opt :output, "write merged assembly to file",
      :type => String, :required => :true
  opt :threads, "number of threads", :type => :int, :default => 1
  opt :verbose, "be verbose"
end

transfuse = Transfuse::Transfuse.new opts.threads, opts.verbose

assembly_files = transfuse.check_files opts.assemblies
score_files = transfuse.check_files opts.score if opts.score
left = transfuse.check_files opts.left if opts.left
right = transfuse.check_files opts.right if opts.right

if opts.scores
# load the scores from the comma separated list of files
  scores = transfuse.load_scores score_files
elsif opts.left and opts.right
  scores = transfuse.transrate assembly_files, left, right
else
  msg = "Please provide either transrate contig scores as csv files or\n"
  msg << "left and right fastq files to generate scores using transrate"
  abort msg
end

# filter out assemblies with low score
assembly_files = transfuse.filter assembly_files, scores

# concatenate assemblies into one fasta file
cat = transfuse.concatenate assembly_files

# load fasta sequences from concatenated file into hash
transfuse.load_fasta cat

# cluster using vsearch
msa = transfuse.cluster cat, opts.output

transfuse.consensus msa, opts.output

